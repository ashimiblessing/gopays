{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","React","useState","index","loaded","setLoaded","Dimensions","get","drawerWidth","setDrawerWidth","drawerGestureRef","useRef","colors","isDrawerOpen","Boolean","history","find","it","type","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","key","handleDrawerClose","closeDrawer","useEffect","emit","subscription","BackHandler","addEventListener","remove","updateWidth","window","removeEventListener","includes","renderNavigationView","progress","renderContent","styles","content","routes","map","route","descriptor","unmountOnBlur","options","isFocused","StyleSheet","absoluteFill","opacity","render","activeKey","gestureEnabled","ref","current","backgroundColor","background","card","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n} from '@react-navigation/routers';\nimport { useTheme } from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() =>\n    getDefaultDrawerWidth(Dimensions.get('window'))\n  );\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = Boolean(state.history.find(it => it.type === 'drawer'));\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <GestureHandlerWrapper style={styles.content}>\n      <SafeAreaProviderCompat>\n        <DrawerGestureContext.Provider value={drawerGestureRef}>\n          <Drawer\n            open={isDrawerOpen}\n            gestureEnabled={gestureEnabled}\n            onOpen={handleDrawerOpen}\n            onClose={handleDrawerClose}\n            onGestureRef={ref => {\n              // @ts-ignore\n              drawerGestureRef.current = ref;\n            }}\n            gestureHandlerProps={gestureHandlerProps}\n            drawerType={drawerType}\n            drawerPosition={drawerPosition}\n            sceneContainerStyle={[\n              { backgroundColor: colors.background },\n              sceneContainerStyle,\n            ]}\n            drawerStyle={[\n              { width: drawerWidth, backgroundColor: colors.card },\n              drawerStyle,\n            ]}\n            overlayStyle={{ backgroundColor: overlayColor }}\n            swipeEdgeWidth={edgeWidth}\n            swipeDistanceThreshold={minSwipeDistance}\n            hideStatusBar={hideStatusBar}\n            statusBarAnimation={statusBarAnimation}\n            renderDrawerContent={renderNavigationView}\n            renderSceneContent={renderContent}\n            keyboardDismissMode={keyboardDismissMode}\n            drawerPostion={drawerPosition}\n          />\n        </DrawerGestureContext.Provider>\n      </SafeAreaProviderCompat>\n    </GestureHandlerWrapper>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}