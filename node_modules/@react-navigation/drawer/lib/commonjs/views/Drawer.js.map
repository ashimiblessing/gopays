{"version":3,"sources":["Drawer.tsx"],"names":["Clock","Animated","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","shouldEnableGesture","Platform","OS","navigator","window","isWebAppleDevice","test","userAgent","MSStream","DrawerView","handleEndInteraction","interactionHandle","undefined","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","clock","isDrawerTypeFront","props","drawerType","isGestureEnabled","gestureEnabled","isOpen","open","nextIsOpen","isSwiping","gestureState","State","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","drawerPosition","touchDistanceFromDrawer","swipeDistanceThreshold","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","toggleDrawer","dragX","onOpen","onClose","pendingOpenValue","forceUpdate","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleTapStateChange","oldState","handleContainerLayout","e","setValue","layout","width","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","StatusBar","setHidden","prevProps","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","styles","main","content","transform","container","opacity","zIndex","React","PureComponent","defaultProps","drawerPostion","StyleSheet","create","backgroundColor","top","bottom","maxWidth","flex","overflow"],"mappings":"49BAAA,oDACA,yCAYA,uEAKA,sFACA,0D,k5BAGEA,CAAAA,K,CAyBEC,8B,CAzBFD,K,CACAE,K,CAwBED,8B,CAxBFC,K,CACAC,Q,CAuBEF,8B,CAvBFE,Q,CACAC,Y,CAsBEH,8B,CAtBFG,Y,CACAC,U,CAqBEJ,8B,CArBFI,U,CACAC,S,CAoBEL,8B,CApBFK,S,CACAC,M,CAmBEN,8B,CAnBFM,M,CACAC,G,CAkBEP,8B,CAlBFO,G,CACAC,G,CAiBER,8B,CAjBFQ,G,CACAC,G,CAgBET,8B,CAhBFS,G,CACAC,K,CAeEV,8B,CAfFU,K,CACAC,I,CAcEX,8B,CAdFW,I,CACAC,I,CAaEZ,8B,CAbFY,I,CACAC,M,CAYEb,8B,CAZFa,M,CACAC,E,CAWEd,8B,CAXFc,E,CACAC,K,CAUEf,8B,CAVFe,K,CACAC,W,CASEhB,8B,CATFgB,W,CACAC,Q,CAQEjB,8B,CARFiB,Q,CACAC,G,CAOElB,8B,CAPFkB,G,CACAC,G,CAMEnB,8B,CANFmB,G,CACAC,Q,CAKEpB,8B,CALFoB,Q,CACAC,G,CAIErB,8B,CAJFqB,G,CACAC,E,CAGEtB,8B,CAHFsB,E,CACAC,G,CAEEvB,8B,CAFFuB,G,CACAC,G,CACExB,8B,CADFwB,G,CAGF,GAAMC,CAAAA,IAAI,CAAG,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,CAAd,CACA,GAAMC,CAAAA,IAAI,CAAG,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,CAAC,CAAf,CAEA,GAAMC,CAAAA,cAAc,CAAG,CAAvB,CACA,GAAMC,CAAAA,eAAe,CAAG,CAAC,CAAzB,CAEA,GAAMC,CAAAA,gCAAgC,CAAG,EAAzC,CAEA,GAAMC,CAAAA,sBAAsB,CAAG,CAA/B,CAEA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,SAAS,CAAE,IADS,CAEpBC,OAAO,CAAE,GAFW,CAGpBC,IAAI,CAAE,CAHc,CAIpBC,iBAAiB,CAAE,IAJC,CAKpBC,yBAAyB,CAAE,IALP,CAMpBC,kBAAkB,CAAE,IANA,CAAtB,CAuCA,QAASC,CAAAA,mBAAT,EAAwC,CACtC,GACEC,sBAASC,EAAT,GAAgB,KAAhB,EACA,MAAOC,CAAAA,SAAP,GAAqB,WADrB,EAEA,MAAOC,CAAAA,MAAP,GAAkB,WAHpB,CAIE,CACA,GAAMC,CAAAA,gBAAgB,CACpB,mBAAmBC,IAAnB,CAAwBH,SAAS,CAACI,SAAlC,GAAgD,CAACH,MAAM,CAACI,QAD1D,CAGA,MAAO,CAACH,gBAAR,CACD,CAED,MAAO,KAAP,CACD,C,GAEoBI,CAAAA,U,0cAqEXC,oB,CAAuB,UAAM,CACnC,GAAI,MAAKC,iBAAL,GAA2BC,SAA/B,CAA0C,CACxCC,gCAAmBC,sBAAnB,CAA0C,MAAKH,iBAA/C,EACA,MAAKA,iBAAL,CAAyBC,SAAzB,CACD,CACF,C,OAEOG,sB,CAAyB,UAAM,CACrC,GAAI,MAAKJ,iBAAL,GAA2BC,SAA/B,CAA0C,CACxC,MAAKD,iBAAL,CAAyBE,gCAAmBG,uBAAnB,EAAzB,CACD,CACF,C,OAEOC,K,CAAQ,GAAI1D,CAAAA,KAAJ,E,OAGR2D,iB,CAAoB,GAAIzD,CAAAA,KAAJ,CAC1B,MAAK0D,KAAL,CAAWC,UAAX,GAA0B,OAA1B,CAAoCnC,IAApC,CAA2CC,KADjB,C,OAGpBmC,gB,CAAmB,GAAI5D,CAAAA,KAAJ,CACzB,MAAK0D,KAAL,CAAWG,cAAX,CAA4BrC,IAA5B,CAAmCC,KADV,C,OAInBqC,M,CAAS,GAAI9D,CAAAA,KAAJ,CAAkB,MAAK0D,KAAL,CAAWK,IAAX,CAAkBvC,IAAlB,CAAyBC,KAA3C,C,OACTuC,U,CAAa,GAAIhE,CAAAA,KAAJ,CAAuB2B,KAAvB,C,OACbsC,S,CAAY,GAAIjE,CAAAA,KAAJ,CAAkByB,KAAlB,C,OAEZyC,Y,CAAe,GAAIlE,CAAAA,KAAJ,CAAkBmE,iCAAMC,YAAxB,C,OACfC,M,CAAS,GAAIrE,CAAAA,KAAJ,CAAkB,CAAlB,C,OACTsE,S,CAAY,GAAItE,CAAAA,KAAJ,CAAkB,CAAlB,C,OACZuE,Q,CAAW,GAAIvE,CAAAA,KAAJ,CAAkB,CAAlB,C,OACXwE,O,CAAU,GAAIxE,CAAAA,KAAJ,CAAkB,CAAlB,C,OACVyE,Q,CAAW,GAAIzE,CAAAA,KAAJ,CAAkB,CAAlB,C,OAEX0E,c,CAAiB,GAAI1E,CAAAA,KAAJ,CAAkB,CAAlB,C,OACjB2E,W,CAAc,GAAI3E,CAAAA,KAAJ,CAAkB,CAAlB,C,OACd4E,a,CAAgB,GAAI5E,CAAAA,KAAJ,CAAkB,CAAlB,C,OAChB6E,c,CAAiB,GAAI7E,CAAAA,KAAJ,CACvB,MAAK0D,KAAL,CAAWmB,cAAX,GAA8B,OAA9B,CAAwChD,eAAxC,CAA0DD,cADnC,C,OA6BjBkD,uB,CAA0BnE,IAAI,CACpC,MAAK8C,iBAD+B,CAEpC9C,IAAI,CACFE,EAAE,CAAC,MAAKgE,cAAN,CAAsBjD,cAAtB,CADA,CAEFX,GAAG,CAEDM,GAAG,CAACA,GAAG,CAAC,MAAK8C,MAAN,CAAc,MAAKE,QAAnB,CAAJ,CAAkC,MAAKI,WAAvC,CAFF,CAGD,CAHC,CAFD,CAOFzD,GAAG,CACDC,QAAQ,CAENI,GAAG,CACDA,GAAG,CAAC,MAAKmD,cAAN,CAAsB,MAAKC,WAA3B,CADF,CAEDpD,GAAG,CAAC,MAAK8C,MAAN,CAAc,MAAKE,QAAnB,CAFF,CAFG,CAMN1C,eANM,CADP,CASD,CATC,CAPD,CAFgC,CAqBpC,CArBoC,C,OAwB9BkD,sB,CAAyB,GAAI/E,CAAAA,KAAJ,CAC/B,MAAK0D,KAAL,CAAWqB,sBAAX,GAAsC5B,SAAtC,CACI,MAAKO,KAAL,CAAWqB,sBADf,CAEIjD,gCAH2B,C,OAKzBkD,sB,CAAyB,GAAIhF,CAAAA,KAAJ,CAC/B,MAAK0D,KAAL,CAAWsB,sBADoB,C,OAIzBC,gB,CAA4B,MAAKvB,KAAL,CAAWK,I,OAGvCmB,iB,CAA6B,K,OAE7BC,qB,CAAwB,GAAInF,CAAAA,KAAJ,CAAkByB,KAAlB,C,OAExB2D,Y,CAAe,SAACtB,MAAD,CAA4C,CACjE,GAAMuB,CAAAA,OAAO,CAAG,GAAIrF,CAAAA,KAAJ,CAAU,CAAV,CAAhB,CACA,GAAMsF,CAAAA,SAAS,CAAG,GAAItF,CAAAA,KAAJ,CAAU,CAAV,CAAlB,CAEA,GAAMuF,CAAAA,KAAK,CAAG,CACZd,QAAQ,CAAE,MAAKA,QADH,CAEZe,IAAI,CAAE,GAAIxF,CAAAA,KAAJ,CAAU,CAAV,CAFM,CAGZyF,QAAQ,CAAE,GAAIzF,CAAAA,KAAJ,CAAUyB,KAAV,CAHE,CAIZiE,QAAQ,CAAE,GAAI1F,CAAAA,KAAJ,CAAU,CAAV,CAJE,CAAd,CAOA,MAAOS,CAAAA,KAAK,CAAC,CACXE,IAAI,CAACT,YAAY,CAAC,MAAKsD,KAAN,CAAb,CAA2B9B,IAA3B,CAAiC,CAGnCJ,GAAG,CAAC+D,OAAD,CAAUlE,QAAQ,CAAC2C,MAAD,CAAS,MAAKa,WAAd,CAA2B,MAAKE,cAAhC,CAAlB,CAHgC,CAInCvD,GAAG,CAACgE,SAAD,CAAY,CAAZ,CAJgC,CAKnChE,GAAG,CAACiE,KAAK,CAACC,IAAP,CAAa,CAAb,CALgC,CAMnClE,GAAG,CAACiE,KAAK,CAACE,QAAP,CAAiBhE,KAAjB,CANgC,CAOnCH,GAAG,CAACiE,KAAK,CAACG,QAAP,CAAiB,MAAKpB,SAAtB,CAPgC,CAQnChD,GAAG,CAAC,MAAKwC,MAAN,CAAcA,MAAd,CARgC,CASnC3D,UAAU,CAAC,MAAKqD,KAAN,CATyB,CAUnC9C,IAAI,CAAC,EAAD,CAAK,MAAK4C,sBAAV,CAV+B,CAWnChC,GAAG,CAAC,MAAK6D,qBAAN,CAA6B1D,KAA7B,CAXgC,CAAjC,CADO,CAcXpB,MAAM,CAAC,MAAKmD,KAAN,CAAa+B,KAAb,kBAAyBvD,aAAzB,EAAwCqD,OAAO,CAAPA,OAAxC,GAdK,CAeX1E,IAAI,CAAC4E,KAAK,CAACE,QAAP,CAAiB,CAEnBnE,GAAG,CAAC,MAAK+C,MAAN,CAAc,CAAd,CAFgB,CAGnB/C,GAAG,CAAC,MAAKiD,QAAN,CAAgB,CAAhB,CAHgB,CAInBjD,GAAG,CAAC,MAAKgD,SAAN,CAAiB,CAAjB,CAJgB,CAKnBhD,GAAG,CAAC,MAAKkD,OAAN,CAAe,CAAf,CALgB,CAOnBpE,SAAS,CAAC,MAAKoD,KAAN,CAPU,CAQnB9C,IAAI,CAAC,CAAC,MAAKoD,MAAN,CAAD,CAAgB,cAAgC,+CAA9B6B,KAA8B,UAClD,GAAM5B,CAAAA,IAAI,CAAG6B,OAAO,CAACD,KAAD,CAApB,CACA,MAAK1C,oBAAL,GAEA,GAAIc,IAAI,GAAK,MAAKL,KAAL,CAAWK,IAAxB,CAA8B,CAG5B,MAAK8B,YAAL,CAAkB,MAAKnC,KAAL,CAAWK,IAA7B,EACD,CACF,CATG,CARe,CAAjB,CAfO,CAAD,CAAZ,CAmCD,C,OAEO+B,K,CAAQrF,KAAK,CAAC,CACpBR,QAAQ,CACN,MAAK6D,MADC,CAENpD,IAAI,CAAC,CAAC,MAAKoD,MAAN,CAAD,CAAgB,eAAgC,gDAA9B6B,KAA8B,UAClD,GAAM5B,CAAAA,IAAI,CAAG6B,OAAO,CAACD,KAAD,CAApB,CAEA,MAAKV,gBAAL,CAAwBlB,IAAxB,CAGA,GAAIA,IAAI,GAAK,MAAKL,KAAL,CAAWK,IAAxB,CAA8B,CAE5B,GAAIA,IAAJ,CAAU,CACR,MAAKL,KAAL,CAAWqC,MAAX,GACD,CAFD,IAEO,CACL,MAAKrC,KAAL,CAAWsC,OAAX,GACD,CAED,MAAKC,gBAAL,CAAwBlC,IAAxB,CAKA,MAAKmC,WAAL,GACD,CACF,CArBG,CAFE,CADY,CA0BpBjG,QAAQ,CACN,MAAK+D,UADC,CAENrD,IAAI,CAACS,GAAG,CAAC,MAAK4C,UAAN,CAAkBrC,KAAlB,CAAJ,CAA8B,CAEhChB,IAAI,CAACT,YAAY,CAAC,MAAKsD,KAAN,CAAb,CAA2BpD,SAAS,CAAC,MAAKoD,KAAN,CAApC,CAF4B,CAIhClC,GAAG,CAAC,MAAKwC,MAAN,CAAc,MAAKE,UAAnB,CAJ6B,CAKhC1C,GAAG,CAAC,MAAKiD,QAAN,CAAgB,CAAhB,CAL6B,CAMhCjD,GAAG,CAAC,MAAK0C,UAAN,CAAkBrC,KAAlB,CAN6B,CAA9B,CAFE,CA1BY,CAsCpB1B,QAAQ,CACN,MAAKgE,SADC,CAKNvD,IAAI,CAAC,CAAC,MAAKuD,SAAN,CAAD,CAAmB,eAAgC,gDAA9B0B,KAA8B,aAC7CQ,CAAAA,mBAD6C,CACrB,MAAKzC,KADgB,CAC7CyC,mBAD6C,CAGrD,GAAIR,KAAK,GAAKnE,IAAd,CAAoB,CAClB,GAAI2E,mBAAmB,GAAK,SAA5B,CAAuC,CACrCC,sBAASC,OAAT,GACD,CAED,MAAKC,eAAL,CAAqB,IAArB,EACD,CAND,IAMO,CACL,MAAKA,eAAL,CAAqB,MAAKrB,gBAA1B,EACD,CACF,CAZG,CALE,CAtCY,CAyDpBhF,QAAQ,CACN,MAAKiE,YADC,CAENvD,IAAI,CACFE,EAAE,CAAC,MAAKqD,YAAN,CAAoBC,iCAAMoC,MAA1B,CADA,CAEF7F,IAAI,CAAC,EAAD,CAAK,MAAK4C,sBAAV,CAFF,CAFE,CAzDY,CAgEpB3C,IAAI,CACFE,EAAE,CAAC,MAAKqD,YAAN,CAAoBC,iCAAMoC,MAA1B,CADA,CAEF,CACE5F,IAAI,CAAC,MAAKsD,SAAN,CAAiBvC,IAAjB,CAAuB,CAEzBJ,GAAG,CAAC,MAAK2C,SAAN,CAAiBzC,IAAjB,CAFsB,CAIzBF,GAAG,CAAC,MAAKkD,OAAN,CAAe,MAAKC,QAApB,CAJsB,CAAvB,CADN,CAQEnD,GAAG,CACD,MAAKmD,QADJ,CAEDlE,GAAG,CAAC,MAAKiE,OAAN,CAAe,MAAKD,QAApB,CAA8B,MAAKO,uBAAnC,CAFF,CARL,CAaE1E,SAAS,CAAC,MAAKoD,KAAN,CAbX,CAFE,CAiBF,CACElC,GAAG,CAAC,MAAK2C,SAAN,CAAiBxC,KAAjB,CADL,CAEEH,GAAG,CAAC,MAAK+C,MAAN,CAAc,CAAd,CAFL,CAGE,MAAKe,YAAL,CACEzE,IAAI,CACF,MAAKwE,qBADH,CAEF,MAAKrB,MAFH,CAGFnD,IAAI,CACFU,EAAE,CACAb,GAAG,CACDO,WAAW,CAACT,GAAG,CAAC,MAAKiE,QAAN,CAAJ,CAAqBxC,sBAArB,CADV,CAEDhB,WAAW,CAACT,GAAG,CAAC,MAAKgE,SAAN,CAAJ,CAAsB,MAAKU,sBAA3B,CAFV,CADH,CAKAjE,WAAW,CAACT,GAAG,CAAC,MAAKiE,QAAN,CAAJ,CAAqB,MAAKQ,sBAA1B,CALX,CADA,CAQFpE,IAAI,CACFE,EAAE,CAAC,MAAKgE,cAAN,CAAsBjD,cAAtB,CADA,CAGFb,WAAW,CACTJ,IAAI,CAACE,EAAE,CAAC,MAAKyD,SAAN,CAAiB,CAAjB,CAAH,CAAwB,MAAKC,QAA7B,CAAuC,MAAKD,SAA5C,CADK,CAET,CAFS,CAHT,CAQFtD,QAAQ,CACNL,IAAI,CAACE,EAAE,CAAC,MAAKyD,SAAN,CAAiB,CAAjB,CAAH,CAAwB,MAAKC,QAA7B,CAAuC,MAAKD,SAA5C,CADE,CAEN,CAFM,CARN,CARF,CAqBF,MAAKR,MArBH,CAHF,CADN,CAHF,CAjBE,CAhEgB,CAmHpB,MAAKW,QAnHe,CAAD,C,OAsHb+B,U,CAAa7F,IAAI,CACvBE,EAAE,CAAC,MAAKgE,cAAN,CAAsBhD,eAAtB,CADqB,CAEvBX,GAAG,CAACD,GAAG,CAACE,QAAQ,CAAC,MAAKwD,WAAN,CAAmB,CAAC,CAApB,CAAT,CAAiC,MAAKmB,KAAtC,CAAJ,CAAkD,CAAlD,CAFoB,CAGvB7E,GAAG,CAACC,GAAG,CAAC,MAAKyD,WAAN,CAAmB,MAAKmB,KAAxB,CAAJ,CAAoC,CAApC,CAHoB,C,OAMjBW,Q,CAAW9F,IAAI,CAErBE,EAAE,CAAC,MAAK8D,WAAN,CAAmB,CAAnB,CAFmB,CAGrB,CAHqB,CAIrBrE,GAAG,CAACM,MAAM,CAAC,MAAK4F,UAAN,CAAkB,MAAK7B,WAAvB,CAAP,CAJkB,C,OAOf+B,kB,CAAqB5F,KAAK,CAAC,CACjC,CACE6F,WAAW,CAAE,CACXC,CAAC,CAAE,MAAKvC,MADG,CAEXwC,YAAY,CAAE,MAAKtC,QAFR,CAGXD,SAAS,CAAE,MAAKA,SAHL,CADf,CADiC,CAAD,C,OAU1BwC,wB,CAA2BhG,KAAK,CAAC,CACvC,CACE6F,WAAW,CAAE,CACXpB,KAAK,CAAE,eAACwB,CAAD,QAA+BzF,CAAAA,GAAG,CAAC,MAAK4C,YAAN,CAAoB6C,CAApB,CAAlC,EADI,CADf,CADuC,CAAD,C,OAQhCC,oB,CAAuBlG,KAAK,CAAC,CACnC,CACE6F,WAAW,CAAE,CACXM,QAAQ,CAAE,kBAACF,CAAD,QACRpG,CAAAA,IAAI,CAACE,EAAE,CAACkG,CAAD,CAAI5C,iCAAMoC,MAAV,CAAH,CAAsBjF,GAAG,CAAC,MAAK6D,qBAAN,CAA6B3D,IAA7B,CAAzB,CADI,EADC,CADf,CADmC,CAAD,C,OAS5B0F,qB,CAAwB,SAACC,CAAD,QAC9B,OAAKzC,cAAL,CAAoB0C,QAApB,CAA6BD,CAAC,CAACR,WAAF,CAAcU,MAAd,CAAqBC,KAAlD,CAD8B,E,OAGxBC,kB,CAAqB,SAACJ,CAAD,CAA0B,CACrD,MAAKxC,WAAL,CAAiByC,QAAjB,CAA0BD,CAAC,CAACR,WAAF,CAAcU,MAAd,CAAqBC,KAA/C,EACA,MAAKzB,YAAL,CAAkB,MAAKnC,KAAL,CAAWK,IAA7B,EAKAyD,qBAAqB,CAAC,iBAAM,OAAK5C,aAAL,CAAmBwC,QAAnB,CAA4B,CAA5B,CAAN,EAAD,CAArB,CACD,C,OAEOvB,Y,CAAe,SAAC9B,IAAD,CAAmB,CACxC,GAAI,MAAKkB,gBAAL,GAA0BlB,IAA9B,CAAoC,CAClC,MAAKC,UAAL,CAAgBoD,QAAhB,CAAyBrD,IAAI,CAAGvC,IAAH,CAAUC,KAAvC,EAIA,MAAKwD,gBAAL,CAAwBlB,IAAxB,CACD,CACF,C,OAEOuC,e,CAAkB,SAACmB,MAAD,CAAqB,iBACC,MAAK/D,KADN,CACrCgE,aADqC,aACrCA,aADqC,CACtBC,kBADsB,aACtBA,kBADsB,CAG7C,GAAID,aAAa,EAAI,MAAKxC,iBAAL,GAA2BuC,MAAhD,CAAwD,CACtD,MAAKvC,iBAAL,CAAyBuC,MAAzB,CACAG,uBAAUC,SAAV,CAAoBJ,MAApB,CAA4BE,kBAA5B,EACD,CACF,C,iHA/YkBG,S,CAAkB,kBAS/B,KAAKpE,KAT0B,CAEjCK,IAFiC,cAEjCA,IAFiC,CAGjCc,cAHiC,cAGjCA,cAHiC,CAIjClB,UAJiC,cAIjCA,UAJiC,CAKjCE,cALiC,cAKjCA,cALiC,CAMjCkB,sBANiC,cAMjCA,sBANiC,CAOjCC,sBAPiC,cAOjCA,sBAPiC,CAQjC0C,aARiC,cAQjCA,aARiC,CAWnC,GAAII,SAAS,CAACjE,cAAV,GAA6BA,cAAjC,CAAiD,CAC/C,KAAKD,gBAAL,CAAsBwD,QAAtB,CAA+BvD,cAAc,CAAGrC,IAAH,CAAUC,KAAvD,EACD,CAED,GAEE,MAAO,MAAKwE,gBAAZ,GAAiC,SAAjC,EACAlC,IAAI,GAAK,KAAKkC,gBAHhB,CAIE,CACA,KAAKJ,YAAL,CAAkB9B,IAAlB,EACD,CAED,KAAKkC,gBAAL,CAAwB9C,SAAxB,CAEA,GAAIY,IAAI,GAAK+D,SAAS,CAAC/D,IAAnB,EAA2B2D,aAA/B,CAA8C,CAC5C,KAAKpB,eAAL,CAAqBvC,IAArB,EACD,CAED,GAAI+D,SAAS,CAACjD,cAAV,GAA6BA,cAAjC,CAAiD,CAC/C,KAAKA,cAAL,CAAoBuC,QAApB,CACEvC,cAAc,GAAK,OAAnB,CAA6BhD,eAA7B,CAA+CD,cADjD,EAGD,CAED,GAAIkG,SAAS,CAACnE,UAAV,GAAyBA,UAA7B,CAAyC,CACvC,KAAKF,iBAAL,CAAuB2D,QAAvB,CAAgCzD,UAAU,GAAK,OAAf,CAAyBnC,IAAzB,CAAgCC,KAAhE,EACD,CAED,GAAIqG,SAAS,CAAC/C,sBAAV,GAAqCA,sBAAzC,CAAiE,CAC/D,KAAKA,sBAAL,CAA4BqC,QAA5B,CACErC,sBAAsB,GAAK5B,SAA3B,CACI4B,sBADJ,CAEIjD,gCAHN,EAKD,CAED,GAAIgG,SAAS,CAAC9C,sBAAV,GAAqCA,sBAAzC,CAAiE,CAC/D,KAAKA,sBAAL,CAA4BoC,QAA5B,CAAqCpC,sBAArC,EACD,CACF,C,mEAEsB,CACrB,KAAKsB,eAAL,CAAqB,KAArB,EACA,KAAKrD,oBAAL,GACD,C,uCA0VQ,kCAcH,KAAKS,KAdF,CAELK,IAFK,cAELA,IAFK,CAGLF,cAHK,cAGLA,cAHK,CAILgB,cAJK,cAILA,cAJK,CAKLlB,UALK,cAKLA,UALK,CAMLoE,cANK,cAMLA,cANK,CAOLC,mBAPK,cAOLA,mBAPK,CAQLC,WARK,cAQLA,WARK,CASLC,YATK,cASLA,YATK,CAULC,YAVK,cAULA,YAVK,CAWLC,mBAXK,cAWLA,mBAXK,CAYLC,kBAZK,cAYLA,kBAZK,CAaLC,mBAbK,cAaLA,mBAbK,CAgBP,GAAMC,CAAAA,OAAO,CAAG1D,cAAc,GAAK,OAAnC,CAEA,GAAM2D,CAAAA,iBAAiB,CAAG7E,UAAU,GAAK,OAAf,CAAyB,CAAzB,CAA6B,KAAK6C,UAA5D,CACA,GAAMiC,CAAAA,gBAAgB,CACpB9E,UAAU,GAAK,MAAf,CACI+E,yBAAYC,KAAZ,CACExH,QAAQ,CACNI,GAAG,CAAC,KAAKmD,cAAN,CAAsB,KAAKC,WAA3B,CADG,CAEN4D,OAAO,CAAG,CAAH,CAAO,CAAC,CAFT,CADV,CAKE,CANN,CAOI,KAAK/B,UARX,CAUA,GAAMoC,CAAAA,MAAM,CACVjF,UAAU,GAAK,MAAf,CACI,CADJ,CAEI+E,yBAAYC,KAAZ,CACA,MADA,CAEAxH,QAAQ,CAAC,KAAKwD,WAAN,CAAmB,CAAC,CAApB,CALd,CASA,GAAMkE,CAAAA,OAAO,CAAGN,OAAO,CAGnB,CAAEO,KAAK,CAAE,CAAT,CAAYxB,KAAK,CAAEvD,IAAI,CAAGZ,SAAH,CAAe4E,cAAtC,CAHmB,CAInB,CAAEgB,IAAI,CAAE,CAAR,CAAWzB,KAAK,CAAEvD,IAAI,CAAGZ,SAAH,CAAe4E,cAArC,CAJJ,CAMA,MACE,qBAAC,4CAAD,wBACE,GAAG,CAAEI,YADP,CAEE,aAAa,CAAE,CAAC,CAACpG,sBAAF,CAA0BA,sBAA1B,CAFjB,CAGE,WAAW,CAAE,CAAC,CAACA,sBAAF,CAA0BA,sBAA1B,CAHf,CAIE,cAAc,CAAE,KAAK2E,kBAJvB,CAKE,oBAAoB,CAAE,KAAKI,wBAL7B,CAME,OAAO,CAAE+B,OANX,CAOE,OAAO,CAAEhF,cAPX,EAQMyE,mBARN,oDAUE,oBAAC,8BAAD,CAAU,IAAV,EACE,QAAQ,CAAE,KAAKpB,qBADjB,CAEE,KAAK,CAAE8B,MAAM,CAACC,IAFhB,kDAIE,oBAAC,8BAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACLD,MAAM,CAACE,OADF,CAEL,CACEC,SAAS,CAAE,CAAC,CAAE3C,UAAU,CAAEgC,iBAAd,CAAD,CADb,CAFK,CAKLR,mBALK,CADT,kDASE,oBAAC,iBAAD,EACE,2BAA2B,CAAEjE,IAD/B,CAEE,yBAAyB,CAAEA,IAAI,CAAG,qBAAH,CAA2B,MAF5D,CAGE,KAAK,CAAEiF,MAAM,CAACE,OAHhB,kDAKGb,kBAAkB,CAAC,CAAE5B,QAAQ,CAAE,KAAKA,QAAjB,CAAD,CALrB,CATF,CAgBE,oBAAC,4CAAD,EAAmB,oBAAoB,CAAE,KAAKO,oBAA9C,kDACE,oBAAC,gBAAD,EAAS,QAAQ,CAAE,KAAKP,QAAxB,CAAkC,KAAK,CAAEyB,YAAzC,kDADF,CAhBF,CAJF,CAwBE,oBAAC,8BAAD,CAAU,IAAV,EACE,IAAI,CAAEzH,KAAK,CAAC,CACVR,QAAQ,CAAC,KAAKkF,qBAAN,CAA6B,CACnCxE,IAAI,CAACE,EAAE,CAAC,KAAKsE,qBAAN,CAA6B3D,IAA7B,CAAH,CAAuC,CACzCF,GAAG,CAAC,KAAK0C,UAAN,CAAkBvC,KAAlB,CADsC,CAEzCf,IAAI,CAAC,EAAD,CAAK,iBAAO,CAAA,MAAI,CAACuE,gBAAL,CAAwB,KAA/B,EAAL,CAFqC,CAAvC,CAD+B,CAA7B,CADE,CAAD,CADb,kDAxBF,CAkCE,oBAAC,8BAAD,CAAU,IAAV,EACE,wBAAwB,CAAElB,IAD5B,CAEE,qBAAqB,CAAEvB,sBAASC,EAAT,GAAgB,KAFzC,CAGE,QAAQ,CAAE,KAAK8E,kBAHjB,CAIE,KAAK,CAAE,CACLyB,MAAM,CAACI,SADF,CAELb,OAAO,CAAG,CAAEO,KAAK,CAAEF,MAAT,CAAH,CAAuB,CAAEG,IAAI,CAAEH,MAAR,CAFzB,CAGL,CACEO,SAAS,CAAE,CAAC,CAAE3C,UAAU,CAAEiC,gBAAd,CAAD,CADb,CAEEY,OAAO,CAAE,KAAKzE,aAFhB,CAGE0E,MAAM,CAAE3F,UAAU,GAAK,MAAf,CAAwB,CAAC,CAAzB,CAA6B,CAHvC,CAHK,CAQLsE,WARK,CAJT,kDAeGG,mBAAmB,CAAC,CAAE3B,QAAQ,CAAE,KAAKA,QAAjB,CAAD,CAftB,CAlCF,CAVF,CADF,CAiED,C,wBA1gBqC8C,KAAK,CAACC,a,6BAAzBxG,U,CACZyG,Y,CAAe,CACpBC,aAAa,CAAEhB,yBAAYC,KAAZ,CAAoB,MAApB,CAA6B,OADxB,CAEpBhF,UAAU,CAAE,OAFQ,CAGpBE,cAAc,CAAEtB,mBAAmB,EAHf,CAIpBwF,cAAc,CAAE,EAJI,CAKpB/C,sBAAsB,CAAE,GALJ,CAMpBmB,mBAAmB,CAAE,SAND,CAOpBuB,aAAa,CAAE,KAPK,CAQpBC,kBAAkB,CAAE,OARA,C,CA4gBxB,GAAMqB,CAAAA,MAAM,CAAGW,wBAAWC,MAAX,CAAkB,CAC/BR,SAAS,CAAE,CACTS,eAAe,CAAE,OADR,CAETpF,QAAQ,CAAE,UAFD,CAGTqF,GAAG,CAAE,CAHI,CAITC,MAAM,CAAE,CAJC,CAKTzC,KAAK,CAAE,KALE,CAMT0C,QAAQ,CAAE,MAND,CADoB,CAS/Bd,OAAO,CAAE,CACPe,IAAI,CAAE,CADC,CATsB,CAY/BhB,IAAI,CAAE,CACJgB,IAAI,CAAE,CADF,CAEJC,QAAQ,CAAE,QAFN,CAZyB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\n/**\n * Disables the pan gesture by default on Apple devices in the browser.\n * https://stackoverflow.com/a/9039885\n */\nfunction shouldEnableGesture(): boolean {\n  if (\n    Platform.OS === 'web' &&\n    typeof navigator !== 'undefined' &&\n    typeof window !== 'undefined'\n  ) {\n    const isWebAppleDevice =\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nexport default class DrawerView extends React.PureComponent<Props> {\n  static defaultProps = {\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: shouldEnableGesture(),\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      gestureEnabled,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (prevProps.gestureEnabled !== gestureEnabled) {\n      this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n    }\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n  private isGestureEnabled = new Value(\n    this.props.gestureEnabled ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, State.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() => this.drawerOpacity.setValue(1));\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={onGestureRef}\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={gestureEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={styles.main}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              {\n                transform: [{ translateX: contentTranslateX }],\n              },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={open}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'auto'}\n              style={styles.content}\n            >\n              {renderSceneContent({ progress: this.progress })}\n            </View>\n            <TapGestureHandler onHandlerStateChange={this.handleTapStateChange}>\n              <Overlay progress={this.progress} style={overlayStyle} />\n            </TapGestureHandler>\n          </Animated.View>\n          <Animated.Code\n            exec={block([\n              onChange(this.manuallyTriggerSpring, [\n                cond(eq(this.manuallyTriggerSpring, TRUE), [\n                  set(this.nextIsOpen, FALSE),\n                  call([], () => (this.currentOpenValue = false)),\n                ]),\n              ]),\n            ])}\n          />\n          <Animated.View\n            accessibilityViewIsModal={open}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              isRight ? { right: offset } : { left: offset },\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress: this.progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}