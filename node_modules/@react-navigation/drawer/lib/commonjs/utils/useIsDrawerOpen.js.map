{"version":3,"sources":["useIsDrawerOpen.tsx"],"names":["useIsDrawerOpen","navigation","drawer","dangerouslyGetState","type","dangerouslyGetParent","React","useState","Boolean","history","find","it","isDrawerOpen","setIsDrawerOpen","useEffect","unsubscribe","addListener","e","data","state"],"mappings":"6VAAA,oDACA,gDAMe,QAASA,CAAAA,eAAT,EAA2B,CACxC,GAAMC,CAAAA,UAAU,CAAG,2BAAnB,CAEA,GAAIC,CAAAA,MAAM,CAAGD,UAAb,CAIA,MAAOC,MAAM,EAAIA,MAAM,CAACC,mBAAP,GAA6BC,IAA7B,GAAsC,QAAvD,CAAiE,CAC/DF,MAAM,CAAGA,MAAM,CAACG,oBAAP,EAAT,CACD,CATuC,oBAWAC,KAAK,CAACC,QAAN,CAAe,iBACrDL,CAAAA,MAAM,CACFM,OAAO,CACLN,MAAM,CAACC,mBAAP,GAA6BM,OAA7B,CAAqCC,IAArC,CAA0C,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACP,IAAH,GAAY,QAAhB,EAA5C,CADK,CADL,CAIF,KALiD,EAAf,CAXA,iEAWjCQ,YAXiC,qBAWnBC,eAXmB,qBAmBxCP,KAAK,CAACQ,SAAN,CAAgB,UAAM,CACpB,GAAMC,CAAAA,WAAW,CAAGb,MAAM,CAACc,WAAP,CAAmB,OAAnB,CAA4B,SAAAC,CAAC,CAAI,CACnDJ,eAAe,CACbL,OAAO,CAACS,CAAC,CAACC,IAAF,CAAOC,KAAP,CAAaV,OAAb,CAAqBC,IAArB,CAA0B,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACP,IAAH,GAAY,QAAhB,EAA5B,CAAD,CADM,CAAf,CAGD,CAJmB,CAApB,CAMA,MAAOW,CAAAA,WAAP,CACD,CARD,CAQG,CAACb,MAAD,CAASU,YAAT,CARH,EAUA,MAAOA,CAAAA,YAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation, ParamListBase } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '../types';\n\n/**\n * Hook to detect if the drawer is open in a parent navigator.\n */\nexport default function useIsDrawerOpen() {\n  const navigation = useNavigation();\n\n  let drawer = navigation as DrawerNavigationProp<ParamListBase>;\n\n  // The screen might be inside another navigator such as stack nested in drawer\n  // We need to find the closest drawer navigator and add the listener there\n  while (drawer && drawer.dangerouslyGetState().type !== 'drawer') {\n    drawer = drawer.dangerouslyGetParent();\n  }\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(() =>\n    drawer\n      ? Boolean(\n          drawer.dangerouslyGetState().history.find(it => it.type === 'drawer')\n        )\n      : false\n  );\n\n  React.useEffect(() => {\n    const unsubscribe = drawer.addListener('state', e => {\n      setIsDrawerOpen(\n        Boolean(e.data.state.history.find(it => it.type === 'drawer'))\n      );\n    });\n\n    return unsubscribe;\n  }, [drawer, isDrawerOpen]);\n\n  return isDrawerOpen;\n}\n"]}