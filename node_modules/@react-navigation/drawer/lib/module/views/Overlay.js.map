{"version":3,"sources":["Overlay.tsx"],"names":["React","Platform","StyleSheet","Animated","interpolate","cond","greaterThan","PROGRESS_EPSILON","Overlay","forwardRef","ref","progress","style","props","animatedStyle","opacity","inputRange","outputRange","zIndex","styles","overlay","create","absoluteFillObject","backgroundColor","select","web","WebkitTapHighlightColor","default"],"mappings":"glCAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,CAAmBC,UAAnB,KAAqC,cAArC,CACA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,C,GAEQC,CAAAA,W,CAAmCD,Q,CAAnCC,W,CAAaC,I,CAAsBF,Q,CAAtBE,I,CAAMC,W,CAAgBH,Q,CAAhBG,W,CAE3B,GAAMC,CAAAA,gBAAgB,CAAG,IAAzB,CAMA,GAAMC,CAAAA,OAAO,CAAGR,KAAK,CAACS,UAAN,CAAiB,QAASD,CAAAA,OAAT,MAE/BE,GAF+B,CAG/B,IAFEC,CAAAA,QAEF,MAFEA,QAEF,CAFYC,KAEZ,MAFYA,KAEZ,CAFsBC,KAEtB,qDACA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,OAAO,CAAEX,WAAW,CAACO,QAAD,CAAW,CAC7BK,UAAU,CAAE,CAACT,gBAAD,CAAmB,CAAnB,CADiB,CAE7BU,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFgB,CAAX,CADA,CAQpBC,MAAM,CAAEb,IAAI,CAACC,WAAW,CAACK,QAAD,CAAWJ,gBAAX,CAAZ,CAA0C,CAA1C,CAA6C,CAAC,CAA9C,CARQ,CAAtB,CAWA,MACE,qBAAC,QAAD,CAAU,IAAV,aACMM,KADN,EAEE,GAAG,CAAEH,GAFP,CAGE,KAAK,CAAE,CAACS,MAAM,CAACC,OAAR,CAAiBN,aAAjB,CAAgCF,KAAhC,CAHT,kDADF,CAOD,CAtBe,CAAhB,CAwBA,GAAMO,CAAAA,MAAM,CAAGjB,UAAU,CAACmB,MAAX,CAAkB,CAC/BD,OAAO,kBACFlB,UAAU,CAACoB,kBADT,EAELC,eAAe,CAAE,oBAFZ,EAGFtB,QAAQ,CAACuB,MAAT,CAAgB,CACjBC,GAAG,CAAE,CAEHC,uBAAuB,CAAE,aAFtB,CADY,CAKjBC,OAAO,CAAE,EALQ,CAAhB,CAHE,CADwB,CAAlB,CAAf,CAcA,cAAenB,CAAAA,OAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst { interpolate, cond, greaterThan } = Animated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, animatedStyle, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    ...Platform.select({\n      web: {\n        // Disable touch highlight on mobile Safari.\n        WebkitTapHighlightColor: 'transparent',\n      },\n      default: {},\n    }),\n  },\n});\n\nexport default Overlay;\n"]}