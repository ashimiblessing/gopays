{"version":3,"sources":["DrawerItem.tsx"],"names":["React","Text","View","StyleSheet","useTheme","Color","TouchableItem","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","style","onPress","rest","flatten","borderRadius","color","backgroundColor","iconNode","size","styles","container","wrapper","marginLeft","marginVertical","fontWeight","create","marginHorizontal","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text)\n      .alpha(0.68)\n      .rgb()\n      .string(),\n    activeBackgroundColor = Color(activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <TouchableItem\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </TouchableItem>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n"]}