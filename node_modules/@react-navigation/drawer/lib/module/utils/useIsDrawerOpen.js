import _slicedToArray from"@babel/runtime/helpers/slicedToArray";import*as React from'react';import{useNavigation}from'@react-navigation/native';export default function useIsDrawerOpen(){var navigation=useNavigation();var drawer=navigation;while(drawer&&drawer.dangerouslyGetState().type!=='drawer'){drawer=drawer.dangerouslyGetParent();}var _React$useState=React.useState(function(){return drawer?Boolean(drawer.dangerouslyGetState().history.find(function(it){return it.type==='drawer';})):false;}),_React$useState2=_slicedToArray(_React$useState,2),isDrawerOpen=_React$useState2[0],setIsDrawerOpen=_React$useState2[1];React.useEffect(function(){var unsubscribe=drawer.addListener('state',function(e){setIsDrawerOpen(Boolean(e.data.state.history.find(function(it){return it.type==='drawer';})));});return unsubscribe;},[drawer,isDrawerOpen]);return isDrawerOpen;}
//# sourceMappingURL=useIsDrawerOpen.js.map